---
name: knapsack
title: Problema dello zaino
description: problema dello zaino in versione classica
tags:
- programmazione dinamica
- sottoproblemi e ricorrenze

modes: ['free','with_checks']

instance:
  CapacityMax: 37
  elementi: ['A','B','C','D','E','F','G','H','I','L','M','N']
  pesi:     [ 15, 16, 18, 11, 13,  6,  7,  3,  1, 12, 10,  8]
  valori:   [ 50, 52, 54, 37, 45, 17, 19,  7,  8, 39, 30, 22]

tasks:
- 1:
    tot_points: 5
    ver_points: 1
    task_codename: opt-sol_CapacityMax
    request: 'Tra i sottoinsiemi di oggetti di peso complessivo non eccedente $CapacityMax$= {CapacityMax} fornirne uno in cui sia massima la somma dei valori.'
    init_answ_cell_msg: '#Inserisci la tua risposta (in forma di lista)\nanswer{num_of_question}=[]'
    verif: 'display(Markdown(verif_knapsack(elementi,pesi,valori,CapacityMax,answer{num_of_question}, pt_green=1, pt_red={task["tot_points"]}, index_pt={num_of_question-1}, val_or_sol="sol")))'

    BOTH_soluzione_ottima_task_1: [['E', 13, 45], ['L', 12, 39], ['I', 1, 8], ['D', 11, 37]]

    AUX__spiegazione_task_1: |
     Le informazioni che mi servono sono contenute nella matrice `max_val_for_genCap`.

- 2:
    tot_points: 5
    ver_points: 1
    task_codename: opt-sol_CapacityGen
    CapacityGen: 36
    request: 'Tra i sottoinsiemi di oggetti di peso complessivo non eccedente <b>la capacità {task["CapacityGen"]}</b> fornirne uno in cui sia massima la somma dei valori.'
    init_answ_cell_msg: '#Inserisci la tua risposta (in forma di lista)\nanswer{num_of_question}=[]'
    verif: 'display(Markdown(verif_knapsack(elementi,pesi,valori,{task["CapacityGen"]},answer{num_of_question}, pt_green=1, pt_red={task["tot_points"]}, index_pt={num_of_question-1}, val_or_sol="sol")))'

    BOTH_soluzione_ottima_task_2: [['E', 13, 45], ['I', 1, 8], ['G', 7, 19], ['A', 15, 50]]

    AUX__spiegazione_task_2: |
     Le informazioni che mi servono sono contenute nella matrice `max_val_for_genCap`.

- 3:
    tot_points: 5
    ver_points: 1
    task_codename: opt-sol_CapacityGen
    CapacityGen: 35
    request: 'Tra i sottoinsiemi di oggetti di peso complessivo non eccedente <b>la capacità {task["CapacityGen"]}</b> fornirne uno in cui sia massima la somma dei valori.'
    init_answ_cell_msg: '#Inserisci la tua risposta (in forma di lista)\nanswer{num_of_question}=[]'
    verif: 'display(Markdown(verif_knapsack(elementi,pesi,valori,{task["CapacityGen"]},answer{num_of_question}, pt_green=1, pt_red={task["tot_points"]}, index_pt={num_of_question-1}, val_or_sol="sol")))'

    BOTH_soluzione_ottima_task_3: [['E', 13, 45], ['I', 1, 8], ['F', 6, 17], ['A', 15, 50]]

    AUX__spiegazione_task_3: |
     Le informazioni che mi servono sono contenute nella matrice `max_val_for_genCap`.

- 4:
    tot_points: 5
    ver_points: 1
    task_codename: opt-sol_CapacityGen
    CapacityGen: 34
    request: 'Tra i sottoinsiemi di oggetti di peso complessivo non eccedente <b>la capacità {task["CapacityGen"]}</b> fornirne uno in cui sia massima la somma dei valori.'
    init_answ_cell_msg: '#Inserisci la tua risposta (in forma di lista)\nanswer{num_of_question}=[]'
    verif: 'display(Markdown(verif_knapsack(elementi,pesi,valori,{task["CapacityGen"]},answer{num_of_question}, pt_green=1, pt_red={task["tot_points"]}, index_pt={num_of_question-1}, val_or_sol="sol")))'

    BOTH_soluzione_ottima_task_4: [['I', 1, 8], ['G', 7, 19], ['D', 11, 37], ['A', 15, 50]]

    AUX__spiegazione_task_4: |
     Le informazioni che mi servono sono contenute nella matrice `max_val_for_genCap`.

- 5:
    tot_points: 5
    ver_points: 1
    task_codename: opt-sol_CapacityGen
    CapacityGen: 33
    request: 'Tra i sottoinsiemi di oggetti di peso complessivo non eccedente <b>la capacità {task["CapacityGen"]}</b> fornirne uno in cui sia massima la somma dei valori.'
    init_answ_cell_msg: '#Inserisci la tua risposta (in forma di lista)\nanswer{num_of_question}=[]'
    verif: 'display(Markdown(verif_knapsack(elementi,pesi,valori,{task["CapacityGen"]},answer{num_of_question}, pt_green=1, pt_red={task["tot_points"]}, index_pt={num_of_question-1}, val_or_sol="sol")))'

    BOTH_soluzione_ottima_task_5: [['I', 1, 8], ['F', 6, 17], ['D', 11, 37], ['A', 15, 50]]

    AUX__spiegazione_task_5: |
     Le informazioni che mi servono sono contenute nella matrice `max_val_for_genCap`.

- 6:
    tot_points: 5
    ver_points: 1
    task_codename: opt-sol_CapacityMax_dopo-esclusioni
    edrCapMax: ['E']
    request: 'Fornire una soluzione ottima se {CapacityMax} è la capienza dello zaino da non superarsi ma assumendo di non poter prendere nessuno dei seguenti elementi: {task["edrCapMax"]}.'
    init_answ_cell_msg: '#Inserisci la tua risposta (in forma di lista)\nanswer{num_of_question}=[]'
    verif: 'display(Markdown(verif_knapsack(elementi,pesi,valori,CapacityMax,answer{num_of_question}, pt_green=1, pt_red={task["tot_points"]}, index_pt={num_of_question-1}, val_or_sol="sol",edr={task["edrCapMax"]})))'

    BOTH_soluzione_ottima_task_6: [['M', 10, 30], ['I', 1, 8], ['D', 11, 37], ['A', 15, 50]]

    AUX__spiegazione_task_6: |
     Avendo avuto l'attenzione di considerare per ultimi quegli elementi che in questo task mi si chiede di non considerare, l'informazione richiesta è `max_val_for_genCap`[i=new_n=11][b=CapacityMax=37].

- 7:
    tot_points: 5
    ver_points: 1
    task_codename: opt-sol_CapacityGen_dopo-esclusioni
    CapacityGen: 37
    edrCapGen: ['B','E']
    request: 'Fornire una soluzione ottima se {task["CapacityGen"]} è la capienza dello zaino da non superarsi ma assumendo di non poter prendere nessuno dei seguenti elementi: {task["edrCapGen"]}.'
    init_answ_cell_msg: '#Inserisci la tua risposta (in forma di lista)\nanswer{num_of_question}=[]'
    verif: 'display(Markdown(verif_knapsack(elementi,pesi,valori,{task["CapacityGen"]},answer{num_of_question}, pt_green=1, pt_red={task["tot_points"]}, index_pt={num_of_question-1}, val_or_sol="sol",edr={task["edrCapGen"]})))'

    BOTH_soluzione_ottima_task_7: [['M', 10, 30], ['I', 1, 8], ['D', 11, 37], ['A', 15, 50]]

    AUX__spiegazione_task_7: |
     Avendo avuto l'attenzione di considerare per ultimi quegli elementi che in questo task mi si chiede di non considerare, l'informazione richiesta è `max_val_for_genCap`[i=new_n=10][b=CapacityGen=37].

- 8:
    tot_points: 5
    ver_points: 1
    task_codename: opt-sol_CapacityGen_dopo-esclusioni
    CapacityGen: 36
    edrCapGen: ['B','E']
    request: 'Fornire una soluzione ottima se {task["CapacityGen"]} è la capienza dello zaino da non superarsi ma assumendo di non poter prendere nessuno dei seguenti elementi: {task["edrCapGen"]}.'
    init_answ_cell_msg: '#Inserisci la tua risposta (in forma di lista)\nanswer{num_of_question}=[]'
    verif: 'display(Markdown(verif_knapsack(elementi,pesi,valori,{task["CapacityGen"]},answer{num_of_question}, pt_green=1, pt_red={task["tot_points"]}, index_pt={num_of_question-1}, val_or_sol="sol",edr={task["edrCapGen"]})))'

    BOTH_soluzione_ottima_task_8: [['I', 1, 8], ['H', 3, 7], ['F', 6, 17], ['D', 11, 37], ['A', 15, 50]]

    AUX__spiegazione_task_8: |
     Avendo avuto l'attenzione di considerare per ultimi quegli elementi che in questo task mi si chiede di non considerare, l'informazione richiesta è `max_val_for_genCap`[i=new_n=10][b=CapacityGen=36].

- 9:
    tot_points: 5
    ver_points: 1
    task_codename: opt-sol_CapacityGen_dopo-esclusioni
    CapacityGen: 35
    edrCapGen: ['B','E']
    request: 'Fornire una soluzione ottima se {task["CapacityGen"]} è la capienza dello zaino da non superarsi ma assumendo di non poter prendere nessuno dei seguenti elementi: {task["edrCapGen"]}.'
    init_answ_cell_msg: '#Inserisci la tua risposta (in forma di lista)\nanswer{num_of_question}=[]'
    verif: 'display(Markdown(verif_knapsack(elementi,pesi,valori,{task["CapacityGen"]},answer{num_of_question}, pt_green=1, pt_red={task["tot_points"]}, index_pt={num_of_question-1}, val_or_sol="sol",edr={task["edrCapGen"]})))'

    BOTH_soluzione_ottima_task_9: [['N', 8, 22], ['I', 1, 8], ['D', 11, 37], ['A', 15, 50]]

    AUX__spiegazione_task_9: |
     Avendo avuto l'attenzione di considerare per ultimi quegli elementi che in questo task mi si chiede di non considerare, l'informazione richiesta è `max_val_for_genCap`[i=new_n=10][b=CapacityGen=35].

- 10:
    tot_points: 5
    ver_points: 1
    task_codename: opt-sol_CapacityGen_dopo-esclusioni
    CapacityGen: 34
    edrCapGen: ['B','E']
    request: 'Fornire una soluzione ottima se {task["CapacityGen"]} è la capienza dello zaino da non superarsi ma assumendo di non poter prendere nessuno dei seguenti elementi: {task["edrCapGen"]}.'
    init_answ_cell_msg: '#Inserisci la tua risposta (in forma di lista)\nanswer{num_of_question}=[]'
    verif: 'display(Markdown(verif_knapsack(elementi,pesi,valori,{task["CapacityGen"]},answer{num_of_question}, pt_green=1, pt_red={task["tot_points"]}, index_pt={num_of_question-1}, val_or_sol="sol",edr={task["edrCapGen"]})))'

    BOTH_soluzione_ottima_task_10: [['I', 1, 8], ['G', 7, 19], ['D', 11, 37], ['A', 15, 50]]

    AUX__spiegazione_task_10: |
     Avendo avuto l'attenzione di considerare per ultimi quegli elementi che in questo task mi si chiede di non considerare, l'informazione richiesta è `max_val_for_genCap`[i=new_n=10][b=CapacityGen=34].

...