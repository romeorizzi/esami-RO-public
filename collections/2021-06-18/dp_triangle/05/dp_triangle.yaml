---
name: triangle
title: Triangolo
description: problema triangolo delle iOi e poi discesa delle OII fase territoriale
tags:
- programmazione dinamica
- sottoproblemi e ricorrenze

modes: ['free','with_checks']

instance:
  triangle: [ [10,  0,  0,  0,  0, 0, 0],
              [31, 37,  0,  0,  0, 0, 0],
              [27, 20, 10,  0,  0, 0, 0],
              [19, 47, 35, 24,  0, 0, 0],
              [23, 54, 19, 46, 17, 0, 0],
              [51, 13, 21, 56, 53, 71, 0],
              [44, 41, 46, 42, 40, 44, 43]]

tasks:
- 1:
    tot_points: 6
    ver_points: 1
    task_codename: max_val_path
    request: 'Calcolare il massimo valore di un percorso che parta dalla cima del triangolo e termini da qualche parte sulla sua base. Fornire, in qualità di certificato, il percorso sotto forma sequenza di numeri (array di interi) dalla cima alla base.'
#    init_answ_cell_msg: 
    verif: 'display(Markdown(verif_triangolo(somma, percorso, triangle, pt_green=1, pt_red={task["tot_points"]},index_pt={num_of_question-1})))'

    BOTH_valore_ottimo: 246

    AUX__spiegazione: |
     Embeddiamo il triangolo in una matrice triangolare inferiore e definiamo una seconda matrice triangolare `best_path_from` dove `best_path_from`[i,j] = massima somma dei valori su un cammino a scendere dalla posizione (i,j). Pertanto, `best_path_from`[0,0] contiene il valore desiderato e, al tempo stesso, è facile calcolare tutti questi valori salendo dal basso.

     Stampa della matrice `best_path_from`:
       246 
       230        236 
       195        199        189 
       140        168        179        168 
       118        121        117        144        132 
        95         59         67         98         97        115 
        44         41         46         42         40         44         43 
         0          0          0          0          0          0          0          0 
     Notate l'uso delle sentinelle: un'ultima riga di zeri ci ha consentito di applicare una semplice regola uniforme a tutti le celle.

    AUX__codice_che_ha_prodotto_la_matrice_best_path_from: |
                N=len(triangle)
                best_path_from = [ [ 0 ] * (1+N) for i in range(1+N) ]
                for i in range(N-1,-1,-1):
                  for j in range(i+1):
                      best_path_from[i][j] = triangle[i][j] + max(best_path_from[i+1][j],best_path_from[i+1][j+1])
            

- 2:
    tot_points: 6
    ver_points: 0
    task_codename: subproblems_family_and_recurrence
    request: 'Individuare e definire una famiglia di sottoproblemi che consenta di affrontare un\''istanza generica, di dimensione anche grande. Scrivere esplicitamente la ricorrenza che consegna la soluzione di un problema della famiglia avvalendosi delle soluzioni di problemi più piccoli della stessa famiglia. Specificare quali sottoproblemi intendi riguardare invece come casi base.'

- 3:
    tot_points: 6
    ver_points: 0
    task_codename: what_if_with_obliged_cell
    request: 'Come potresti fare per calcolare il massimo valore di un percorso che passi per una data posizione del triangolo?'

...
