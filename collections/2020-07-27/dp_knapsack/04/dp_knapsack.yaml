---
name: knapsack
title: Problema dello zaino
description: problema dello zaino in versione classica
tags:
- programmazione dinamica
- sottoproblemi e ricorrenze

modes: ['free','with_checks']

instance:
  CapacityMax: 30
  elementi: ['A','B','C','D','E','F','G','H','I','L','M','N']
  pesi:     [ 14, 11, 19, 34, 20, 33, 34, 25, 25, 23,  2, 31]
  valori:   [ 13,  9,  8,  8,  8, 10,  4, 17, 19,  7, 13,  6]

tasks:
- 1:
    tot_points: 10
    ver_points: 1
    task_codename: opt-sol_CapacityMax
    request: 'Tra i sottoinsiemi di oggetti di peso complessivo non eccedente $CapacityMax$= {CapacityMax} fornirne uno in cui sia massima la somma dei valori.'
    init_answ_cell_msg: '#Inserisci la tua risposta (in forma di lista)\nanswer{num_of_question}=[]'
    verif: 'display(Markdown(verif_knapsack(elementi,pesi,valori,CapacityMax,answer{num_of_question}, pt_green=1, pt_red={task["tot_points"]}, index_pt={num_of_question-1}, val_or_sol="sol")))'

    BOTH_soluzione_ottima_task_1: [['M', 2, 13], ['B', 11, 9], ['A', 14, 13]]

    AUX__spiegazione_task_1: |
     Le informazioni che mi servono sono contenute nella matrice `max_val_for_genCap`.

- 2:
    tot_points: 10
    ver_points: 1
    task_codename: opt-sol_CapacityGen
    CapacityGen: 25
    request: 'Tra i sottoinsiemi di oggetti di peso complessivo non eccedente <b>la capacità {task["CapacityGen"]}</b> fornirne uno in cui sia massima la somma dei valori.'
    init_answ_cell_msg: '#Inserisci la tua risposta (in forma di lista)\nanswer{num_of_question}=[]'
    verif: 'display(Markdown(verif_knapsack(elementi,pesi,valori,{task["CapacityGen"]},answer{num_of_question}, pt_green=1, pt_red={task["tot_points"]}, index_pt={num_of_question-1}, val_or_sol="sol")))'

    BOTH_soluzione_ottima_task_2: [['M', 2, 13], ['A', 14, 13]]

    AUX__spiegazione_task_2: |
     Le informazioni che mi servono sono contenute nella matrice `max_val_for_genCap`.

- 3:
    tot_points: 10
    ver_points: 1
    task_codename: opt-sol_CapacityMax_dopo-esclusioni
    edrCapMax: ['I']
    request: 'Fornire una soluzione ottima se {CapacityMax} è la capienza dello zaino da non superarsi ma assumendo di non poter prendere nessuno dei seguenti elementi: {task["edrCapMax"]}.'
    init_answ_cell_msg: '#Inserisci la tua risposta (in forma di lista)\nanswer{num_of_question}=[]'
    verif: 'display(Markdown(verif_knapsack(elementi,pesi,valori,CapacityMax,answer{num_of_question}, pt_green=1, pt_red={task["tot_points"]}, index_pt={num_of_question-1}, val_or_sol="sol",edr={task["edrCapMax"]})))'

    BOTH_soluzione_ottima_task_3: [['M', 2, 13], ['B', 11, 9], ['A', 14, 13]]

    AUX__spiegazione_task_3: |
     Avendo avuto l'attenzione di considerare per ultimi quegli elementi che in questo task mi si chiede di non considerare, l'informazione richiesta è `max_val_for_genCap`[i=new_n=11][b=CapacityMax=30].

- 4:
    tot_points: 10
    ver_points: 1
    task_codename: opt-sol_CapacityGen_dopo-esclusioni
    CapacityGen: 25
    edrCapGen: ['I','M']
    request: 'Fornire una soluzione ottima se {task["CapacityGen"]} è la capienza dello zaino da non superarsi ma assumendo di non poter prendere nessuno dei seguenti elementi: {task["edrCapGen"]}.'
    init_answ_cell_msg: '#Inserisci la tua risposta (in forma di lista)\nanswer{num_of_question}=[]'
    verif: 'display(Markdown(verif_knapsack(elementi,pesi,valori,{task["CapacityGen"]},answer{num_of_question}, pt_green=1, pt_red={task["tot_points"]}, index_pt={num_of_question-1}, val_or_sol="sol",edr={task["edrCapGen"]})))'

    BOTH_soluzione_ottima_task_4: [['B', 11, 9], ['A', 14, 13]]

    AUX__spiegazione_task_4: |
     Avendo avuto l'attenzione di considerare per ultimi quegli elementi che in questo task mi si chiede di non considerare, l'informazione richiesta è `max_val_for_genCap`[i=new_n=10][b=CapacityGen=25].

...