---
name: dp_poldo
title: Sottosequenze crescenti e decrescenti
tags:
- programmazione dinamica
- sottoproblemi e ricorrenze
- algoritmi classici su sequenze

instance:
  s: [61, 22, 56, 83, 8, 10, 27, 14, 32, 48, 45, 84, 6, 33, 17, 62, 44, 21, 16, 55, 66, 90, 44, 16, 28]
  forced_ele_pos: 15 # posizione dell'elemento che deve essere incluso nella sottosequenza (per le posizioni parti a contare da 1)
  start_banned_interval: 5 # prima posizione bannata da intervallo proibito
  end_banned_interval:   8 # ultima posizione bannata
  monotonicity_type_subtask1: 'NC' # longest subsequence of s
  monotonicity_type_subtask2: 'NC' # with banned interval
  monotonicity_type_subtask3: 'NC' # with forced element
  monotonicity_type_subtask4: 'A'  # another type
  monotonicity_type_subtask5: 'SD' # Dilworth theorem antichain cover

tasks:
- 1:
    tot_points: 5
    ver_points: 5
    task_codename: NC_subseq_free
    request: 'Fornire una sottosequenza $subs{num_of_question}$ {dictionary_of_types[monotonicity_type_subtask1]} di $s$ che sia la più lunga possibile.'
    request_txt: 'Fornire una sottosequenza {dictionary_of_types[monotonicity_type_subtask1]} di s che sia la più lunga possibile'
    answer_cell_type: "Code"
    init_answ_cell_msg: '#Inserisci la tua risposta (per esempio, [1,2,3])\nsubs{num_of_question}=[]'
    verif: 'display(Markdown(is_subseq_of_type(s, "s", subs{num_of_question}, "subs{num_of_question}", "{monotonicity_type_subtask1}", pt_green=1, pt_red={task["tot_points"]},index_pt={num_of_question - 1})))'

    BOTH_valore_ottimo_task_1: 8

    BOTH_una_soluzione_ottima_task_1: [61, 56, 48, 45, 44, 21, 16, 16]

    AUX__spiegazione_task_1: |
     Definiamo i vettori `max_terminating_with_ele_at_pos` e `max_terminating_not_later_than_at_pos` entrambi di lunghezza |s| ed indicizzati dalle posizioni degli elementi in s. Quì `max_terminating_with_ele_at_pos`[i] = massima lunghezza di una sottosequenza di s con la monotona richiesta e che termina proprio con l'i-esimo elemento di s. Invece `max_terminating_not_later_than_at_pos`[i] = massima lunghezza di una sottosequenza di s correttamente monotona e che non prende da s elementi successivi all'i-esimo elemento. Una computazione ricorsiva prefissa produce facilmente `max_terminating_not_later_than_at_pos` poggiando su `max_terminating_with_ele_at_pos`, ma in realtà anche i valori in `max_terminating_not_later_than_at_pos` finiscono computati ricorsivamente (anche se con lavoro quadratico invece che lineare) e cadono come i birilli. Si ispezionino quindi i seguenti vettori, computati entrambi da sinista, e conteneti risposte a tutta una famiglia di domande di nostra pertinenza.
    AUX__Stampa dei vettori `max_terminating_with_ele_at_pos` e `max_terminating_not_later_than_at_pos`:
     61 22 56 83  8 10 27 14 32 48 45 84  6 33 17 62 44 21 16 55 66 90 44 16 28 (sequence s)
      1  2  2  1  3  3  3  4  3  3  4  1  5  5  6  2  5  6  7  3  2  1  6  8  7 (max_terminating_with_ele_at_pos)
      1  2  2  2  3  3  3  4  4  4  4  4  5  5  6  6  6  6  7  7  7  7  7  8  8 (max_terminating_not_later_than_at_pos)
      0  1  1  1  4  4  4  7  7  7  7  7 12 12 14 14 14 14 18 18 18 18 18 23 23 (pos_max_terminating_not_later_than_at_pos)

- 2:
    tot_points: 5
    ver_points: 5
    task_codename: NC_subseq_banned-interval
    request: 'Fornire una sottosequenza $subs{num_of_question}$ di $s$, la più lunga possibile, che sia {dictionary_of_types[monotonicity_type_subtask2]} e non includa gli elementi di $s$ dalla posizione {start_banned_interval} alla posizione {end_banned_interval}.'
    request_txt: 'Fornire una sottosequenza di s, la più lunga possibile, che sia {dictionary_of_types[monotonicity_type_subtask2]} di s, e che non includa gli elementi di s dalla posizione {str(start_banned_interval)} alla posizione {str(end_banned_interval)}'
    answer_cell_type: "Code"
    init_answ_cell_msg: '#Inserisci la tua risposta (per esempio, [1,2,3])\nsubs{num_of_question}=[]'
    verif: 'display(Markdown(is_subseq_of_type(s, "s", subs{num_of_question}, "subs{num_of_question}", "{monotonicity_type_subtask2}", pt_green=1, pt_red={task["tot_points"]},index_pt={num_of_question - 1}, start_banned_interval={start_banned_interval}, end_banned_interval={end_banned_interval})))'

    BOTH_valore_ottimo_task_2: 8

    BOTH_una_soluzione_ottima_task_2: [61, 56, 48, 45, 33, 17, 16, 16]

    PRIV_valore_ottimo_task_2: max=8, ultimo elemento preso prima di intervallo interdetto ha indice 2 (e valore 2), primo elemento preso dopo intervallo interdetto ha indice 9 (e valore 6)

    AUXS_valore_ottimo_task_2: max=8, ultimo elemento preso prima di intervallo interdetto ha indice 2 (e valore 2), primo elemento preso dopo intervallo interdetto ha indice 9 (e valore 6)

    AUX__spiegazione_task_2: |
     Definiamo i vettori `max_beginning_with_ele_at_pos` e `max_beginning_not_before_than_pos` entrambi di lunghezza |s| ed indicizzati dalle posizioni degli elementi in s. Quì `max_beginning_with_ele_at_pos`[i] = massima lunghezza di una sottosequenza strettamente crescente di s che cominci proprio con l'i-esimo elemento di s. Invece `max_beginning_not_before_than_pos`[i] = massima lunghezza di una sottosequenza strettamente crescente che non prende da s elementi precedenti l'i-esimo elemento. Una computazione ricorsiva, ora suffissa ma in tutto simmetrica alla precendente, produce facilmente i valori di `max_beginning_not_before_than_pos` e di `max_beginning_with_ele_at_pos` procedendo ordinatamente da destra verso sinistra. Esplorando tali vettori, congiuntamente ai prcednti, diviene possibile rispondere alle Richieste 2, 3 e 4.
    AUX__Stampa dei vettori `max_beginning_with_ele_at_pos` e `max_beginning_not_before_than_pos`:
     61 22 56 83  8 10 27 14 32 48 45 84  6 33 17 62 44 21 16 55 66 90 44 16 28 (sequence s)
      8  4  7  7  2  2  4  2  4  6  5  6  1  4  3  5  4  3  2  3  3  3  2  1  1 (max_beginning_with_ele_at_pos)
      8  7  7  7  6  6  6  6  6  6  6  6  5  5  5  5  4  3  3  3  3  3  2  1  1 (max_beginning_not_before_than_pos)
      0  3  3  3 11 11 11 11 11 11 11 11 15 15 15 15 16 21 21 21 21 21 22 24 24 (pos_max_beginning_not_before_than_pos)

- 3:
    tot_points: 10
    ver_points: 1
    task_codename: NC_subseq_forced-element
    request: 'Fornire una sottosequenza $subs{num_of_question}$ di $s$, la più lunga possibile, che sia {dictionary_of_types[monotonicity_type_subtask3]} e che includa l\''elemento di $s$ in posizione {forced_ele_pos}'
    request_txt: 'Fornire una sottosequenza di s, la più lunga possibile, che sia {dictionary_of_types[monotonicity_type_subtask3]} e includa l\''elemento di s in posizione {str(forced_ele_pos)}'
    answer_cell_type: "Code"
    init_answ_cell_msg: '#Inserisci la tua risposta (per esempio, [1,2,3])\nsubs{num_of_question}=[]'
    verif: 'display(Markdown(is_subseq_of_type(s, "s", subs{num_of_question}, "subs{num_of_question}", "{monotonicity_type_subtask3}", pt_green=1, pt_red={task["tot_points"]},index_pt={num_of_question - 1}, forced_ele_pos=forced_ele_pos)))'

    BOTH_valore_ottimo_task_3: 8

    BOTH_una_soluzione_ottima_task_3: [61, 56, 48, 45, 33, 17, 16, 16]

    PRIV_valore_ottimo_task_3: 8 (dato da max_terminating_with_ele_at_pos[14] + max_beginning_with_ele_at_pos[14] -1)

    AUXS_valore_ottimo_task_3: 8 (dato da max_terminating_with_ele_at_pos[14] + max_beginning_with_ele_at_pos[14] -1)

- 4:
    tot_points: 10
    ver_points: 1
    task_codename: A_subseq_free
    request: 'Una sequenza è detta {dictionary_of_types[monotonicity_type_subtask4]}. Fornire una sottosequenza $subs{num_of_question}$ di $s$, la più lunga possibile, che sia di questo tipo.'
    request_txt: 'Una sequenza è detta {dictionary_of_types[monotonicity_type_subtask4]}. Fornire una sottosequenza di s, la più lunga possibile, che sia di questo tipo.'
    answer_cell_type: "Code"
    init_answ_cell_msg: '#Inserisci la tua risposta (per esempio, [1,2,3])\nsubs{num_of_question}=[]'
    verif: 'display(Markdown(is_subseq_of_type(s, "s", subs{num_of_question}, "subs{num_of_question}", "{monotonicity_type_subtask4}", pt_green=1, pt_red={task["tot_points"]},index_pt={num_of_question - 1})))'

    BOTH_valore_ottimo_task_4: 11, indice di ultimo elemento del primo run = 21

    BOTH_una_soluzione_ottima_task_4: [8, 10, 14, 32, 33, 44, 55, 66, 90, 44, 16]
    AUX__spiegazione_task_4: |
     La risposta è data da max_i max_strictly_increasing_terminating_with_ele_at_pos[i] + max_strictly_decreasing_beginning_with_ele_at_pos[i] -1

- 5:
    tot_points: 20
    ver_points: 20
    task_codename: SD_cover_dual
    request: 'Quale è il minor numero possibile di colori _C_ con cui si possa colorare gli elementi della sequenza $s$ in modo che, per ogni colore, la sottosequenza degli elementi di quel colore sia monotona {dictionary_of_types[monotonicity_type_subtask5]}? Specificare il colore da assegnare a ogni elemento, usando come colori i numeri da 1 a _C_ (esempio: [1,2,3,4,2,1,3,1,1,...]).'
    request_txt: 'Quale è il minor numero possibile di colori C con cui si possa colorare gli elementi della sequenza s in modo che, per ogni colore, la sottosequenza degli elementi di quel colore sia monotona {dictionary_of_types[monotonicity_type_subtask5]}? Specificare il colore da assegnare a ogni elemento, usando i numeri da 1 a C (esempio: [1,2,3,4,2,1,3,1,1,...]).'
    answer_cell_type: "Code"
    init_answ_cell_msg: '#Inserisci la tua risposta (per esempio, [1,2,3])\nsubs{num_of_question}=[]'
    verif: 'display(Markdown(eval_coloring(s, "s", subs{num_of_question}, "subs{num_of_question}", "{monotonicity_type_subtask5}", pt_green=2, pt_red={task["tot_points"]},index_pt={num_of_question - 1})))'

    BOTH_valore_ottimo_task_5: 9, una colorazione ottima è [1, 1, 2, 3, 1, 2, 3, 3, 4, 5, 5, 6, 1, 5, 4, 6, 6, 5, 4, 7, 8, 9, 7, 5, 6]

...
