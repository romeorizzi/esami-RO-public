{'end_banned_interval': 8,
 'forced_ele_pos': 15,
 'monotonicity_type_subtask1': 'NC',
 'monotonicity_type_subtask2': 'NC',
 'monotonicity_type_subtask3': 'NC',
 'monotonicity_type_subtask4': 'A',
 'monotonicity_type_subtask5': 'SD',
 's': [61, 22, 56, 83, 8, 10, 27, 14, 32, 48, 45, 84, 6, 33, 17, 62, 44, 21, 16, 55, 66, 90, 44, 16, 28],
 'start_banned_interval': 5}

    BOTH_valore_ottimo 1: 9

    AUX__spiegazione: |
     Definiamo i vettori `max_terminating_with_ele_at_pos` e `max_terminating_not_later_than_at_pos` entrambi di lunghezza |s| ed indicizzati dalle posizioni degli elementi in s. Quì `max_terminating_with_ele_at_pos`[i] = massima lunghezza di una sottosequenza strettamente crescente di s che termina proprio con l'i-esimo elemento di s. Invece `max_terminating_not_later_than_at_pos`[i] = massima lunghezza di una sottosequenza strettamente crescente che non prende da s elementi successivi all'i-esimo elemento. Una computazione ricorsiva prefissa produce facilmente `max_terminating_not_later_than_at_pos` poggiando su `max_terminating_with_ele_at_pos`, ma in realtà anche i valori in `max_terminating_not_later_than_at_pos` finiscono computati ricorsivamente (anche se con lavoro quadratico invece che lineare) e cadono come i birilli. Si ispezionino quindi i seguenti vettori, computati entrambi da sinista, e conteneti risposte a tutta una famiglia di domande di nostra pertinenza.
Stampa dei vettori `max_terminating_with_ele_at_pos` e `max_terminating_not_later_than_at_pos`:
                                     s: 61 22 56 83  8 10 27 14 32 48 45 84  6 33 17 62 44 21 16 55 66 90 44 16 28 
       max_terminating_with_ele_at_pos:  1  1  2  3  1  2  3  3  4  5  5  6  1  5  4  6  6  5  4  7  8  9  6  4  6 
 max_terminating_not_later_than_at_pos:  1  1  2  3  3  3  3  3  4  5  5  6  6  6  6  6  6  6  6  7  8  9  9  9  9 

    STUD_valore_ottimo 2: max=6

    PRIV_valore_ottimo 2: max=6, il prime elemento preso viene dopo la fine dell'intervallo interdetto. E più precisamente è 12 (val=6).

    AUXS_valore_ottimo 2: max=6, il prime elemento preso viene dopo la fine dell'intervallo interdetto. E più precisamente è 12 (val=6).

    AUX__spiegazione: |
     Definiamo i vettori `max_beginning_with_ele_at_pos` e `max_beginning_not_before_than_pos` entrambi di lunghezza |s| ed indicizzati dalle posizioni degli elementi in s. Quì `max_beginning_with_ele_at_pos`[i] = massima lunghezza di una sottosequenza strettamente crescente di s che cominci proprio con l'i-esimo elemento di s. Invece `max_beginning_not_before_than_pos`[i] = massima lunghezza di una sottosequenza strettamente crescente che non prende da s elementi precedenti l'i-esimo elemento. Una computazione ricorsiva, ora suffissa ma in tutto simmetrica alla precendente, produce facilmente i valori di `max_beginning_not_before_than_pos` e di `max_beginning_with_ele_at_pos` procedendo ordinatamente da destra verso sinistra. Esplorando tali vettori, congiuntamente ai prcednti, diviene possibile rispondere alle Richieste 2, 3 e 4.
Stampa dei vettori `max_beginning_with_ele_at_pos` e `max_beginning_not_before_than_pos`:
                                 s: 61 22 56 83  8 10 27 14 32 48 45 84  6 33 17 62 44 21 16 55 66 90 44 16 28 
     max_beginning_with_ele_at_pos:  4  8  4  3  9  8  7  7  6  4  4  2  6  5  5  3  4  4  4  3  2  1  1  2  1 
 max_beginning_not_before_than_pos:  9  9  9  9  9  8  7  7  6  6  6  6  6  5  5  4  4  4  4  3  2  2  2  2  1 

    STUD_valore_ottimo 3: 8

    PRIV_valore_ottimo 3: 8 (dato da max_terminating_with_ele_at_pos[15] + max_beginning_with_ele_at_pos[15] -1)

    AUXS_valore_ottimo 3: 8 (dato da max_terminating_with_ele_at_pos[15] + max_beginning_with_ele_at_pos[15] -1)

    BOTH_valore_ottimo 4: 12, ultimo elemento di primo run = 3
    AUX__spiegazione: |
     La risposta è data da max_i max_terminating_not_later_than_at_pos[i] + max_beginning_not_before_than_pos[i+1]

    BOTH_valore_ottimo 5: 9, colorazione = [1, 1, 2, 3, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 8, 9, 9, 9, 9]
k["tot_points"]},index_pt={num_of_question - 1})))'

- 5:
    tot_points: 20
    ver_points: 20
    task_codename: SD_cover
    request: 'Quale è il minor numero possibile di colori _C_ con cui si possa colorare gli elementi della sequenza $s$ in modo che, per ogni colore, la sottosequenza degli elementi di quel colore sia monotona {dictionary_of_types[monotonicity_type_subtask5]}? Specificare il colore da assegnare a ogni elemento, usando come colori i numeri da 1 a _C_ (esempio: [1,2,3,4,2,1,3,1,1,...]).'
    request_txt: 'Quale è il minor numero possibile di colori C con cui si possa colorare gli elementi della sequenza s in modo che, per ogni colore, la sottosequenza degli elementi di quel colore sia monotona {dictionary_of_types[monotonicity_type_subtask5]}? Specificare il colore da assegnare a ogni elemento, usando i numeri da 1 a C (esempio: [1,2,3,4,2,1,3,1,1,...]).'
    answer_cell_type: "Code"
    init_answ_cell_msg: '#Inserisci la tua risposta (per esempio, [1,2,3])\nsubs{num_of_question}=[]'
    verif: 'display(Markdown(eval_coloring(s, "s", subs{num_of_question}, "subs{num_of_question}", "{monotonicity_type_subtask5}", pt_green=2, pt_red={task["tot_points"]},index_pt={num_of_question - 1})))'

...
