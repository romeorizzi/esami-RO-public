---
name: knapsack
title: Problema dello zaino
description: problema dello zaino in versione classica
tags:
- programmazione dinamica
- sottoproblemi e ricorrenze

modes: ['free','with_checks']

instance:
  CapacityMax: 36
  elementi: ['A','B','C','D','E','F','G','H','I']
  pesi :    [ 12, 13,  5, 12, 11,  5,  5,  3,  1]
  valori :  [ 52, 22, 12, 40, 40, 17, 17,  7,  8]

tasks:
- 1:
    tot_points: 10
    ver_points: 1
    task_codename: max-val_CapacityMax
    request: 'Fornire la massima somma dei valori per un sottoinsieme di elementi con somma dei pesi non eccedente $CapacityMax$= {CapacityMax}.'
    init_answ_cell_msg: '#Inserisci la tua risposta (un numero)\nanswer{num_of_question}=-1'
    verif: 'display(Markdown(verif_knapsack(elementi,pesi,valori,CapacityMax,answer{num_of_question}, pt_green=1, pt_red={task["tot_points"]}, index_pt={num_of_question-1}, val_or_sol="val")))'

    BOTH_valore_ottimo_task_1: 140

    AUX__spiegazione_task_1: |
     Definiamo la matrice `max_val_for_genCap` che ha n+1 righe (la riga 1+i è labellata dall'inserimento di un i-esimo item nel set dei candidati tra cui pescare) e CapacityMax+1 colonne (labellate da un badget b con 0<=b<=CapacityMax) dove `max_val_for_genCap`[i,b] = massimo valore si un subset degli items 1 ... i  con somma dei pesi al più b.
     Stampa della matrice `max_val_for_genCap`:
      ╒════╤════════╤═══════╤═══════╤═══════╤═══════╤═══════╤═══════╤═══════╤═══════╤═══════╕

      │    │   none │   + A │   + B │   + C │   + D │   + E │   + F │   + G │   + H │   + I │

      ╞════╪════════╪═══════╪═══════╪═══════╪═══════╪═══════╪═══════╪═══════╪═══════╪═══════╡

      │  0 │      0 │     0 │     0 │     0 │     0 │     0 │     0 │     0 │     0 │     0 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │  1 │      0 │     0 │     0 │     0 │     0 │     0 │     0 │     0 │     0 │     8 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │  2 │      0 │     0 │     0 │     0 │     0 │     0 │     0 │     0 │     0 │     8 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │  3 │      0 │     0 │     0 │     0 │     0 │     0 │     0 │     0 │     7 │     8 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │  4 │      0 │     0 │     0 │     0 │     0 │     0 │     0 │     0 │     7 │    15 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │  5 │      0 │     0 │     0 │    12 │    12 │    12 │    17 │    17 │    17 │    17 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │  6 │      0 │     0 │     0 │    12 │    12 │    12 │    17 │    17 │    17 │    25 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │  7 │      0 │     0 │     0 │    12 │    12 │    12 │    17 │    17 │    17 │    25 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │  8 │      0 │     0 │     0 │    12 │    12 │    12 │    17 │    17 │    24 │    25 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │  9 │      0 │     0 │     0 │    12 │    12 │    12 │    17 │    17 │    24 │    32 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 10 │      0 │     0 │     0 │    12 │    12 │    12 │    29 │    34 │    34 │    34 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 11 │      0 │     0 │     0 │    12 │    12 │    40 │    40 │    40 │    40 │    42 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 12 │      0 │    52 │    52 │    52 │    52 │    52 │    52 │    52 │    52 │    52 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 13 │      0 │    52 │    52 │    52 │    52 │    52 │    52 │    52 │    52 │    60 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 14 │      0 │    52 │    52 │    52 │    52 │    52 │    52 │    52 │    52 │    60 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 15 │      0 │    52 │    52 │    52 │    52 │    52 │    52 │    52 │    59 │    60 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 16 │      0 │    52 │    52 │    52 │    52 │    52 │    57 │    57 │    59 │    67 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 17 │      0 │    52 │    52 │    64 │    64 │    64 │    69 │    69 │    69 │    69 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 18 │      0 │    52 │    52 │    64 │    64 │    64 │    69 │    69 │    69 │    77 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 19 │      0 │    52 │    52 │    64 │    64 │    64 │    69 │    69 │    69 │    77 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 20 │      0 │    52 │    52 │    64 │    64 │    64 │    69 │    69 │    76 │    77 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 21 │      0 │    52 │    52 │    64 │    64 │    64 │    69 │    74 │    76 │    84 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 22 │      0 │    52 │    52 │    64 │    64 │    64 │    81 │    86 │    86 │    86 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 23 │      0 │    52 │    52 │    64 │    64 │    92 │    92 │    92 │    92 │    94 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 24 │      0 │    52 │    52 │    64 │    92 │    92 │    92 │    92 │    92 │   100 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 25 │      0 │    52 │    74 │    74 │    92 │    92 │    92 │    92 │    93 │   100 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 26 │      0 │    52 │    74 │    74 │    92 │    92 │    92 │    92 │    99 │   101 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 27 │      0 │    52 │    74 │    74 │    92 │    92 │    92 │    98 │    99 │   107 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 28 │      0 │    52 │    74 │    74 │    92 │   104 │   109 │   109 │   109 │   109 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 29 │      0 │    52 │    74 │    74 │   104 │   104 │   109 │   109 │   109 │   117 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 30 │      0 │    52 │    74 │    86 │   104 │   104 │   109 │   109 │   109 │   117 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 31 │      0 │    52 │    74 │    86 │   104 │   104 │   109 │   109 │   116 │   117 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 32 │      0 │    52 │    74 │    86 │   104 │   104 │   109 │   109 │   116 │   124 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 33 │      0 │    52 │    74 │    86 │   104 │   104 │   121 │   126 │   126 │   126 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 34 │      0 │    52 │    74 │    86 │   104 │   104 │   121 │   126 │   126 │   134 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 35 │      0 │    52 │    74 │    86 │   104 │   132 │   132 │   132 │   132 │   134 │

      ├────┼────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤

      │ 36 │      0 │    52 │    74 │    86 │   104 │   132 │   132 │   132 │   133 │   140 │

      ╘════╧════════╧═══════╧═══════╧═══════╧═══════╧═══════╧═══════╧═══════╧═══════╧═══════╛

- 2:
    tot_points: 10
    ver_points: 1
    task_codename: opt-sol_CapacityMax
    request: 'Tra i sottoinsiemi di oggetti di peso complessivo non eccedente $CapacityMax$= {CapacityMax} fornirne uno in cui sia massima la somma dei valori.'
    init_answ_cell_msg: '#Inserisci la tua risposta (in forma di lista)\nanswer{num_of_question}=[]'
    verif: 'display(Markdown(verif_knapsack(elementi,pesi,valori,CapacityMax,answer{num_of_question}, pt_green=1, pt_red={task["tot_points"]}, index_pt={num_of_question-1}, val_or_sol="sol")))'

    BOTH_soluzione_ottima_task_2: [['I', 1, 8], ['E', 11, 40], ['D', 12, 40], ['A', 12, 52]]

    AUX__spiegazione_task_2: |
     Le informazioni che mi servono sono contenute nella matrice `max_val_for_genCap`.

- 3:
    tot_points: 10
    ver_points: 1
    task_codename: max-val_CapacityMax_dopo-esclusioni
    edrCapMax: ['I']
    request: 'Fornire la massima somma dei valori per un sottoinsieme di elementi con somma dei pesi non eccedente {CapacityMax} quando non sia consentito di prendere nessuno degli elementi in {task["edrCapMax"]}</b>.'
    init_answ_cell_msg: '#Inserisci la tua risposta (un numero)\nanswer{num_of_question}=-1'
    verif: 'display(Markdown(verif_knapsack(elementi,pesi,valori,CapacityMax,answer{num_of_question}, pt_green=1, pt_red={task["tot_points"]}, index_pt={num_of_question-1}, val_or_sol="val",edr={task["edrCapMax"]})))'

    BOTH_valore_ottimo_task_3: 133

    AUX__spiegazione_task_3: |
     Avendo avuto l'attenzione di considerare per ultimi quegli elementi che in questo task mi si chiede di non considerare, l'informazione richiesta è `max_val_for_genCap`[i=new_n=8][b=CapacityMax=36].

- 4:
    tot_points: 10
    ver_points: 1
    task_codename: max-val_CapacityGen
    CapacityGen: 33
    request: 'Fornire la massima somma dei valori per un sottoinsieme di elementi con somma dei pesi non eccedente <b>la capacità {task["CapacityGen"]}</b>.'
    init_answ_cell_msg: '#Inserisci la tua risposta (un numero)\nanswer{num_of_question}=-1'
    verif: 'display(Markdown(verif_knapsack(elementi,pesi,valori,{task["CapacityGen"]},answer{num_of_question}, pt_green=1, pt_red={task["tot_points"]}, index_pt={num_of_question-1}, val_or_sol="val")))'

    BOTH_valore_ottimo_task_4: 126

    AUX__spiegazione_task_4: |
     L'informazione richiesta è `max_val_for_genCap`[n=9][b=CapacityGen=33].

...