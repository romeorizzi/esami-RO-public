---
name: lcs
title: Massima sottosequenza comune
tags:
- programmazione dinamica
- sottoproblemi e ricorrenze
- algoritmi classici su stringhe

instance:
  s: "AGATCCCGAGTTTAAAA"
  t: "AAACATACATTCTCACG"

tasks:
- 1:
    tot_points: 8
    ver_points: 1
    task_codename: opt_lcs_s_t
    request: 'Fornire una massima sottosequenza comune tra le due stringhe:<br/>$s$ = {s}<br/>$t$ = {t}.'
    request_txt: 'Fornire una massima sottosequenza comune tra le due stringhe s = {s}  e t = {t}.'
    init_answ_cell_msg: '#Inserisci la tua risposta (una stringa, per esempio "TATATA")\nanswer{num_of_question}=""'
    verif: 'display(Markdown(verifLCS(s, t, answer{num_of_question}, pt_green={task["ver_points"]}, pt_red={task["tot_points"]}, index_pt={num_of_question - 1})))'

    BOTH_valore_ottimo_task_1: 9

    BOTH_soluzione_ottima_task_1: ['A', 'A', 'T', 'C', 'A', 'T', 'T', 'T', 'A']

    AUX__spiegazione_task_1: |
     Definiamo la matrice `pref_of_len` che ha |s|+1 righe (labellate coi caratteri di s) e |t|+1 colonne (labellate coi caratteri di t)  dove `pref_of_len`[i,j] = massima lunghezza di una sottosequenza comune tra il prefisso s_i di s di lunghezza i e il suffisso t_j di t di lunghezza j. Le righe e le colonne sono indicizzate partendo da 0.
     Stampa della matrice `pref_of_len`:
         -  A  A  A  C  A  T  A  C  A  T  T  C  T  C  A  C  G  
      -  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 
      A  0  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1 
      G  0  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2 
      A  0  1  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2 
      T  0  1  2  2  2  2  3  3  3  3  3  3  3  3  3  3  3  3 
      C  0  1  2  2  3  3  3  3  4  4  4  4  4  4  4  4  4  4 
      C  0  1  2  2  3  3  3  3  4  4  4  4  5  5  5  5  5  5 
      C  0  1  2  2  3  3  3  3  4  4  4  4  5  5  6  6  6  6 
      G  0  1  2  2  3  3  3  3  4  4  4  4  5  5  6  6  6  7 
      A  0  1  2  3  3  4  4  4  4  5  5  5  5  5  6  7  7  7 
      G  0  1  2  3  3  4  4  4  4  5  5  5  5  5  6  7  7  8 
      T  0  1  2  3  3  4  5  5  5  5  6  6  6  6  6  7  7  8 
      T  0  1  2  3  3  4  5  5  5  5  6  7  7  7  7  7  7  8 
      T  0  1  2  3  3  4  5  5  5  5  6  7  7  8  8  8  8  8 
      A  0  1  2  3  3  4  5  6  6  6  6  7  7  8  8  9  9  9 
      A  0  1  2  3  3  4  5  6  6  7  7  7  7  8  8  9  9  9 
      A  0  1  2  3  3  4  5  6  6  7  7  7  7  8  8  9  9  9 
      A  0  1  2  3  3  4  5  6  6  7  7  7  7  8  8  9  9  9 
     La matrice di cui sopra, consultata nella sua ultima cella, gi√† consente di determinare la massima lunghezza  di una sottosequenza comune tra s e t (9) ed anche di ricostruire una tale soluzione ottima. Tale matrice, opportunamente consultata, consente di dare risposta anche ad altri quesiti, ma per affrontarne anche altri conviene dotarsi di una seconda matrice che, in modo simmetrico alla prima, consenta di risolvere la stessa domanda e riottenere lo stesso numero (9) da un'altra prospettiva.
     Definiamo la matrice `suff_from_pos` che ha |s|+1 righe (labellate coi caratteri di s, l'ultima labellata con '-') e |t|+1 colonne (labellate coi caratteri di t, l'ultima labellata con '-')  dove `suff_from_pos`[i,j] = massima lunghezza di una sottosequnza comune tra il suffisso s^i di s che inizia col carattere i di s e il suffisso t^j di t che inizia col carattere j di t.
     Stampa della matrice `suff_from_pos`:
         A  A  A  C  A  T  A  C  A  T  T  C  T  C  A  C  G  -
      A  9  9  9  8  8  7  7  6  6  5  5  4  4  3  3  2  1  0 
      G  8  8  8  8  8  7  7  6  6  5  5  4  4  3  3  2  1  0 
      A  8  8  8  8  8  7  7  6  6  5  5  4  4  3  3  2  1  0 
      T  7  7  7  7  7  7  6  6  5  5  5  4  4  3  2  2  1  0 
      C  7  7  7  7  6  6  6  6  5  4  4  4  3  3  2  2  1  0 
      C  7  7  7  7  6  6  6  6  5  4  4  4  3  3  2  2  1  0 
      C  6  6  6  6  6  6  6  6  5  4  3  3  3  3  2  2  1  0 
      G  5  5  5  5  5  5  5  5  5  4  3  2  2  2  2  1  1  0 
      A  5  5  5  5  5  5  5  5  5  4  3  2  2  2  2  1  1  0 
      G  4  4  4  4  4  4  4  4  4  4  3  2  2  1  1  1  1  0 
      T  4  4  4  4  4  4  4  4  4  4  3  2  2  1  1  0  0  0 
      T  4  4  4  4  4  4  3  3  3  3  3  2  2  1  1  0  0  0 
      T  4  4  4  4  4  4  3  2  2  2  2  2  2  1  1  0  0  0 
      A  4  4  4  4  4  3  3  2  2  1  1  1  1  1  1  0  0  0 
      A  3  3  3  3  3  3  3  2  2  1  1  1  1  1  1  0  0  0 
      A  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  0  0  0 
      A  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  0  0  0 
      -  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 
     
- 2:
    tot_points: 8
    ver_points: 1
    task_codename: opt_lcs_beginning
    beginning: C
    request: 'Fornire una stringa di lunghezza massima che <b>inizi con la lettera </b> __{task["beginning"]}__ e sia sottosequenza comune tra: <br/>$s$ = {s}<br/>$t$ = {t}.'
    request_txt: 'Fornire una stringa di lunghezza massima che inizi con la lettera __{task["beginning"]}__ e sia sottosequenza comune tra s = {s}  e t = {t}'
    init_answ_cell_msg: '#Inserisci la tua risposta (una stringa, per esempio "TATATA")\nanswer{num_of_question}=""'
    verif: 'display(Markdown(verifLCS(s, t, answer{num_of_question}, pt_green={task["ver_points"]}, pt_red={task["tot_points"]}, index_pt={num_of_question - 1}, start="{task["beginning"]}")))'
    BOTH_valore_ottimo_task_2: 8

    BOTH_soluzione_ottima_task_2: ['C', 'C', 'C', 'A', 'T', 'T', 'T', 'A']

- 3:
    tot_points: 8
    ver_points: 1
    task_codename: opt_lcs_beginning
    beginning: G
    request: 'Fornire una stringa di lunghezza massima che <b>inizi con la lettera </b> __{task["beginning"]}__ e sia sottosequenza comune tra: <br/>$s$ = {s}<br/>$t$ = {t}.'
    request_txt: 'Fornire una stringa di lunghezza massima che inizi con la lettera __{task["beginning"]}__ e sia sottosequenza comune tra s = {s}  e t = {t}'
    init_answ_cell_msg: '#Inserisci la tua risposta (una stringa, per esempio "TATATA")\nanswer{num_of_question}=""'
    verif: 'display(Markdown(verifLCS(s, t, answer{num_of_question}, pt_green={task["ver_points"]}, pt_red={task["tot_points"]}, index_pt={num_of_question - 1}, start="{task["beginning"]}")))'
    BOTH_valore_ottimo_task_3: 2

    BOTH_soluzione_ottima_task_3: ['G', 'G']

- 4:
    tot_points: 8
    ver_points: 1
    task_codename: opt_lcs_t_suffix
    len_t_suffix:  9
    request: 'Fornire una massima sottosequenza comune tra $s$ = {s} e <br/><b>il suffisso </b> $t\''$ = {t[len(t)-task["len_t_suffix"]:]} di $t$.'
    request_txt: 'Fornire una massima sottosequenza comune tra s = {s} e il suffisso t\'' = {t[len(t)-task["len_t_suffix"]:]} di t.'
    init_answ_cell_msg: '#Inserisci la tua risposta (una stringa, per esempio "TATATA")\nanswer{num_of_question}=""'
    verif: 'display(Markdown(verifLCS("{s}", "{t[len(t)-task["len_t_suffix"]:]}", answer{num_of_question}, pt_green={task["ver_points"]}, pt_red={task["tot_points"]}, index_pt={num_of_question - 1})))'
    BOTH_valore_ottimo_task_4: 6

    BOTH_soluzione_ottima_task_4: ['A', 'T', 'C', 'C', 'A', 'G']

- 5:
    tot_points: 8
    ver_points: 1
    task_codename: opt_lcs_s_prefix
    len_s_prefix:  13
    request: 'Fornire una massima sottosequenza comune tra: <br/><b>il prefisso</b>  $s\''$ = {s[:task["len_s_prefix"]]} di $s$ e <br/>$t$ = {t}.'
    request_txt: 'Fornire una massima sottosequenza comune tra il prefisso s\'' = {s[:task["len_s_prefix"]]} di s  e t = {t}.'
    init_answ_cell_msg: '#Inserisci la tua risposta (una stringa, per esempio "TATATA")\nanswer{num_of_question}=""'
    verif: 'display(Markdown(verifLCS("{s[:task["len_s_prefix"]]}", "{t}", answer{num_of_question}, pt_green={task["ver_points"]}, pt_red={task["tot_points"]}, index_pt={num_of_question - 1})))'

    BOTH_valore_ottimo_task_5: 8

    BOTH_soluzione_ottima_task_5: ['A', 'A', 'T', 'C', 'C', 'C', 'A', 'G']

...
