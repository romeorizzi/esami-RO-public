---
name: robot_no_gemme
title: Conteggio di cammini in una griglia rettangolare con celle proibite
tags:
- programmazione dinamica
- sottoproblemi e ricorrenze

instance:
  campo_minato:
    - [ " " , " " , " " , " " , " " , " " , " " , " " , "*" ]
    - [ " " , " " , " " , "*" , " " , "*" , " " , " " , "*" ]
    - [ " " , " " , " " , "*" , " " , " " , " " , " " , " " ]
    - [ " " , " " , " " , " " , " " , " " , " " , "*" , " " ]
    - [ " " , " " , "*" , " " , "*" , " " , " " , " " , " " ]
    - [ " " , " " , " " , " " , " " , " " , "*" , " " , " " ]
    - [ " " , "*" , " " , "*" , " " , " " , " " , " " , " " ]
    - [ " " , " " , " " , " " , " " , " " , " " , " " , " " ]
  start_point: (2,5)
  target_point: (6,6)
  middle_point: (4,5)

tasks:
- 1:
    tot_points: 5
    ver_points: 5
    request: 'A mano o tramite un programma componi la matrice $num\_paths\_to$ di dimensione $(m+1)\\times(n+1)$ e tale per cui in $num\_paths\_to[i][j]$ sia riposto il numero di cammini dalla cella $A1=(1,1)$ alla generica cella $(i,j)$, per ogni $i = 0,..., m$ e $j = 0,..., n$.'
    request_txt: 'A mano o tramite un programma componi la matrice num_paths_to di dimensione (m+1) x (n+1) e tale per cui in num_paths_to[i][j] sia riposto il numero di cammini dalla cella A1=(1,1) alla generica cella (i,j), per ogni i = 0, ..., m e j = 0, ..., n'
    answer_cell_type: "Code"
    init_answ_cell_msg: 'num_paths_to'
    verif: 'visualizza_e_valuta("num_paths_to",num_paths_to, pt_green={task["tot_points"]}, pt_red={task["tot_points"]},index_pt={num_of_question - 1})'
    AUX__la_matrice_num_paths_to: |
     Stampa della matrice `num_paths_to` (e righe e le colonne sono indicizzate partendo da 0, dove la prima riga e colonna vengono utili come sentinelle):
         -   1   2   3   4   5   6   7   8   9   
     -   0   0   0   0   0   0   0   0   0   0 
     1   0   1   1   1   1   1   1   1   1   0 
     2   0   1   2   3   0   1   0   1   2   0 
     3   0   1   3   6   0   1   1   2   4   4 
     4   0   1   4  10  10  11  12  14   0   4 
     5   0   1   5   0  10   0  12  26  26  30 
     6   0   1   6   6  16  16  28   0  26  56 
     7   0   1   0   6   0  16  44  44  70 126 
     8   0   1   1   7   7  23  67 111 181 307 

    AUX__codice_che_ha_prodotto_la_matrice_num_paths_to: |
         num_paths_to = [ [ 0 ] * (n+1) for i in range(m+1) ]
         num_paths_to[1][1] = 1
         for i in range(1,m+1):
           for j in range(1,n+1):
             if (i,j) != (1,1):
                num_paths_to[i][j] = 0 if campo_minato[i-1][j-1]=="*" else num_paths_to[i-1][j]+num_paths_to[i][j-1]
    

- 2:
    tot_points: 5
    ver_points: 5
    request: 'Componi la matrice $num\_paths\_from$ di dimensione $(m+2)\\times(n+2)$" \
                        +f" e tale per cui in $num\_paths\_from[i][j]$, per ogni $i = 1,..., m+1$ e $j = 1,..., n+1$," \
                        +f" sia riposto il numero di cammini dalla generica cella $(i,j)$ alla cella "\
                        +f"$(m,n)$, per ogni i = 0, ..., m+1 e j = 0, ..., n+1.'
    request_txt: 'Componi la matrice num_paths_from di dimensione {m+2} x {n+2} e tale per cui in num_paths_from[i][j] sia riposto il numero di cammini dalla generica cella (i,j) alla cella (m,n), per ogni i = 0, ..., m+1 e j = 0, ..., n+1'
    answer_cell_type: "Code"
    init_answ_cell_msg: 'num_paths_from'
    verif: 'visualizza_e_valuta("num_paths_from",num_paths_from, pt_green={task["tot_points"]}, pt_red={task["tot_points"]},index_pt={num_of_question - 1})'
    AUX__la_matrice_num_paths_from: |
     Stampa della matrice `num_paths_from` (e righe e le colonne sono indicizzate partendo da 0, dove l'ultima riga e colonna vengono utili come sentinelle):
         -   1   2   3   4   5   6   7   8   9  10   
     -   0   0   0   0   0   0   0   0   0   0   0 
     1   0 307 130  57  36  36   7   7   1   0   0 
     2   0 177  73  21   0  29   0   6   1   0   0 
     3   0 104  52  21   0  29  17   5   1   1   0 
     4   0  52  31  21  21  12  12   4   0   1   0 
     5   0  21  10   0   9   0   8   4   4   1   0 
     6   0  11  10  10   9   9   4   0   3   1   0 
     7   0   1   0   1   0   5   4   3   2   1   0 
     8   0   1   1   1   1   1   1   1   1   1   0 
     9   0   0   0   0   0   0   0   0   0   0   0 

    AUX__codice_che_ha_prodotto_la_matrice_num_paths_from: |
         num_paths_from = [ [ 0 ] * (n+2) for i in range(m+2) ]
         num_paths_from[m][n] = 1
         for i in range(m,0,-1):
           for j in range(n,0,-1):
             if (i,j) != (m,n):
                 num_paths_from[i][j] = 0 if campo_minato[i-1][j-1]=="*" else num_paths_from[i+1][j]+num_paths_from[i][j+1]
    

- 3:
    tot_points: 5
    ver_points: 5
    request: 'Quanti sono i percorsi con partenza in $A1=(1,1)$ e arrivo in $(m,n)$?'
    request_txt: 'Quanti sono i percorsi con partenza in A1=(1,1) e arrivo in (m,n)?'
    answer_cell_type: "Markdown"
    init_answ_cell_msg: 'Inserisci quì la tua risposta'
    verif: ''
    BOTH_la_risposta_corretta: 307  (ossia um_paths_to[8][9])

- 4:
    tot_points: 10
    ver_points: 1
    request: 'Quanti sono i percorsi con partenza in ${chr(64+start_point[0])}{start_point[1]}={start_point}$ e arrivo in ${chr(64+m)}{n}=({m},{n})$?'
    request_txt: 'Quanti sono i percorsi con partenza in {chr(64+start_point[0])}{start_point[1]}={start_point} e arrivo in {chr(64+m)}{n}=({m},{n})?'
    answer_cell_type: "Markdown"
    init_answ_cell_msg: 'Inserisci quì la tua risposta'
    verif: ''
    BOTH_la_risposta_corretta: 29  (ossia num_paths_from[2][5])

- 5:
    tot_points: 10
    ver_points: 1
    request: 'Quanti sono i percorsi con partenza in $A1=(1,1)$ e arrivo in ${chr(64+target_point[0])}{target_point[1]}={target_point}$?'
    request_txt: 'Quanti sono i percorsi con partenza in A1=(1,1) e arrivo in {chr(64+target_point[0])}{target_point[1]}={target_point}?'
    answer_cell_type: "Markdown"
    init_answ_cell_msg: 'Inserisci quì la tua risposta'
    verif: ''
    BOTH_la_risposta_corretta: 28  (ossia num_paths_to[6][6])

- 6:
    tot_points: 10
    ver_points: 1
    request: 'Quanti sono i percorsi che partono da $A1=(1,1)$, passano da ${chr(64+middle_point[0])}{middle_point[1]}={middle_point}$, e arrivano in ${chr(64+m)}{n}=({m},{n})$?'
    request_txt: 'Quanti sono i percorsi che partono da A1=(1,1), passano da {chr(64+middle_point[0])}{middle_point[1]}={middle_point}, e arrivano in {chr(64+m)}{n}=({m},{n})?'
    answer_cell_type: "Markdown"
    init_answ_cell_msg: 'Inserisci quì la tua risposta'
    verif: ''
    BOTH_la_risposta_corretta: 132  (ossia num_paths_to[4][5]*num_paths_from[4][5])

...
